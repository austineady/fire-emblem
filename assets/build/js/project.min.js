'use strict';

(function () {
  'use strict';

  // Base Global Obj

  var fe = {};

  window.fe = window.fe || fe;

  // Base Includes
  function _scale(item, s) {
    s = s ? s : scale;
    item.scaleX = s;
    item.scaleY = s;
  }

  function rowsToPixels(r) {
    // pixels per row
    var pxPerRow = yStart / 10;

    return pxPerRow * r;
  }

  function pixelsToRows(p) {
    return Math.floor(p / pxPerRow);
  }

  function colsToPixels(c) {
    // pixels per col
    var pxPerCol = xStart / 15;

    return pxPerCol * c;
  }

  function pixelsToCols(p) {
    return Math.floor(p / pxPerCol);
  }

  fe.render = function (stage) {
    stage.update();
  };

  // Functions


  function handleImageLoad(e) {
    console.log('Image Loaded:');
    console.log(e);
  }

  function handleImageError(e) {
    console.error('Image Error');
    console.log(e);
  }

  function drawCircle() {
    var circle = new createjs.Shape();
    // drawCircle(x, y, radius)
    circle.graphics.beginFill('DeepSkyBlue').drawCircle(0, 0, 50);
    circle.x = 100;
    circle.y = 100;
    //battle.addChild(circle);
    //renderStage();
  }

  function playSprite() {
    lyn.gotoAndPlay('start');
    createjs.Ticker.addEventListener("tick", function () {
      renderDisplay(lyn);
    });
  }

  function playSprite2() {
    if (brigand.currentFrame === 0) {
      brigand.gotoAndPlay('attack');
    } else {
      brigand.gotoAndPlay(brigand.currentFrame);
    }
    createjs.Ticker.addEventListener("tick", function () {
      if (brigand.currentFrame == 4) {
        brigand.y = -10;
        brigand.x = 80;
      } else if (brigand.currentFrame == 5) {
        brigand.x = 140;
      } else if (brigand.currentFrame == 6) {
        brigand.x = 190;
      } else if (brigand.currentFrame == 7 || brigand.currentFrame == 8) {
        brigand.x = 190;
        brigand.y = 15;
      } else if (brigand.currentFrame == 9) {
        brigand.x = 150;
        brigand.y = -5;
      } else if (brigand.currentFrame == 10) {
        brigand.x = 120;
        brigand.y = -15;
      } else if (brigand.currentFrame == 11) {
        brigand.x = 90;
        brigand.y = -15;
      } else {
        brigand.x = 70;
        brigand.y = 25;
      }
      renderDisplay(brigand);
    });
  }

  function stopSprite(action, obj) {
    sprite = obj ? obj : sprite;
    sprite.gotoAndStop(0);
    battle.update(lyn);
  }

  function stopSprite2() {
    brigand.gotoAndStop(brigand.currentFrame);
    renderDisplay(brigand);
  }

  function plusFrame(c) {
    var char = window[c];
    char.gotoAndStop(char.currentFrame);
    char.currentFrame = char.currentFrame + 1;
    char.gotoAndStop(char.currentFrame);
    renderDisplay(char);
  }

  function minusFrame(c) {
    var char = window[c];
    char.gotoAndStop(char.currentFrame);
    char.currentFrame = char.currentFrame - 1;
    char.gotoAndStop(char.currentFrame);
    renderDisplay(char);
  }

  function handleYOffsetChange(e, c) {
    window[c].y = e.value;
    renderDisplay(window[c]);
  }

  function handleXOffsetChange(e, c) {
    window[c].x = e.value;
    renderDisplay(window[c]);
  }

  function renderDisplay(c) {
    var fd = document.getElementById(c.wid + '-current-frame');
    var xd = document.getElementById(c.wid + '-x-offset');
    var yd = document.getElementById(c.wid + '-y-offset');
    fd.textContent = c.currentFrame;
    modifyLynX(c.currentFrame);
    if (xd.value.length === 0 && yd.value.length === 0) {
      xd.value = c.x;
      yd.value = c.y;
    }
    battle.update();
  }

  function modifyLynX(f) {
    switch (f) {
      case 4:
        lyn.x = 200;
        break;
      case 5:
        lyn.x = 170;
        break;
      case 6:
      case 7:
      case 8:
        lyn.x = 200;
        break;
      default:
        lyn.x = 230;
        break;
    }
    return;
  }

  function handleStageClick(char, e) {
    var rectCol = pixelsToCols(e.stageX);
    var rectRow = pixelsToRows(e.stageY);
    char.col = rectCol;
    char.row = rectRow;
    hero = char;

    createMoveMap(5, rectCol, rectRow, char);
  }

  function handleRectClick(rect, e, c) {
    var targetCol = rect.col;
    var targetRow = rect.row;

    var colDiff = targetCol - hero.col;
    var rowDiff = targetRow - hero.row;

    handleMovement(colDiff, rowDiff, c);
  }

  function createMoveMap(mv, col, row, c) {
    // Current character coords
    var cCalc = col * pxPerCol;
    var rCalc = row * pxPerRow;
    var cw = main.canvas.clientWidth;
    var ch = main.canvas.clientHeight;
    var matrixArr = [];
    var newMatrix = [];
    var arrCache = [];

    for (var i = 0; i <= mv; i++) {
      for (var idx = 0; idx <= mv; idx++) {
        if (idx + i <= mv && idx + i !== 0) {
          matrixArr.push([idx, i]);
        }
      }
    }

    matrixArr.forEach(function (item) {
      var newItem = [];
      var cacheString = '';
      newItem[0] = (col + item[0]) * pxPerCol;
      newItem[1] = (row + item[1]) * pxPerRow;
      cacheString = newItem[0] + ', ' + newItem[1];
      if (arrCache.indexOf(cacheString) === -1 && newItem[0] < cw && newItem[0] > 0 && newItem[1] < ch) {
        arrCache.push(cacheString);
        newMatrix.push(newItem);
      }
      newItem = [];
      newItem[0] = (col - item[0]) * pxPerCol;
      newItem[1] = (row - item[1]) * pxPerRow;
      cacheString = newItem[0] + ', ' + newItem[1];
      if (arrCache.indexOf(cacheString) === -1 && newItem[0] < cw && newItem[0] > 0 && newItem[1] < ch) {
        arrCache.push(cacheString);
        newMatrix.push(newItem);
      }
      newItem = [];
      newItem[0] = (col + item[0]) * pxPerCol;
      newItem[1] = (row - item[1]) * pxPerRow;
      cacheString = newItem[0] + ', ' + newItem[1];
      if (arrCache.indexOf(cacheString) === -1 && newItem[0] < cw && newItem[0] > 0 && newItem[1] < ch) {
        arrCache.push(cacheString);
        newMatrix.push(newItem);
      }
      newItem = [];
      newItem[0] = (col - item[0]) * pxPerCol;
      newItem[1] = (row + item[1]) * pxPerRow;
      cacheString = newItem[0] + ', ' + newItem[1];
      if (arrCache.indexOf(cacheString) === -1 && newItem[0] < cw && newItem[0] > 0 && newItem[1] < ch) {
        arrCache.push(cacheString);
        newMatrix.push(newItem);
      }
      return;
    });
    //console.log(newMatrix);
    moveCache = newMatrix;

    drawMoveRects(newMatrix, c);
  }

  function drawMoveRects(arr, c) {
    arr.forEach(function (coord) {
      var rect = new createjs.Shape();
      rect.posX = coord[0];
      rect.posY = coord[1];
      rect.col = coord[0] / pxPerCol;
      rect.row = coord[1] / pxPerRow;
      rect.graphics.beginFill('rgba(92, 165, 225, .6)').drawRect(coord[0], coord[1], pxPerCol - 1, pxPerRow - 1);
      rect.addEventListener('click', function (e) {
        handleRectClick(rect, e, c);
      });
      main.addChild(rect);
      main.setChildIndex(rect, 1);
    });
    main.update();
  }

  function handleMovement(x, y, c) {
    if (x !== 0) {
      moveX(x, c);
    }
    if (y !== 0) {
      moveY(y, c);
    }
  }

  function moveX(x, c) {
    if (x > 0) {
      // move right
      for (var i = 1; i <= x; i++) {
        c.x = colsToPixels(c.col + i);
        fe.render(main);
      }
    } else {
      // move left
      for (var i = 1; i <= Math.abs(x); i++) {
        c.x = colsToPixels(c.col - i);
        fe.render(main);
      }
    }
    return;
  }

  function moveY(y, c) {
    if (y > 0) {
      // move down
      for (var i = 1; i <= y; i++) {
        c.y = rowsToPixels(c.row + i);
        fe.render(main);
      }
    } else {
      // move up
      for (var i = 1; i <= Math.abs(y); i++) {
        c.y = rowsToPixels(c.row - i);
        fe.render(main);
      }
    }
    return;
  }

  // Hero Includes
  'use strict';

  function Lyn() {
    this.posRow = 9;
    this.posCol = 14;
    this.row = 9;
    this.col = 14;
    this.src = 'assets/images/overworld/overworld-characters-clean.png';
    // image to use
    this.images = [];
    // width, height, count(optional), registration x, registration y
    this.frames = [
    // x, y, width, height, imageIndex, regX, regY
    [189, 171, 16, 16], [189, 203, 16, 16], [189, 235, 16, 16]];
    this.animations = {
      'idle': {
        frames: [0, 2, 1, 0],
        next: 'idle',
        framerate: 2
      }
    };
    this.battle = {
      wid: 'lyn',
      posY: 40,
      posX: 230,
      row: 9,
      col: 15,
      mv: 3,
      src: 'assets/images/animations/hero/lyn-loop.png',
      // image to use
      images: [],
      // width, height, count(optional), registration x, registration y
      frames: { width: 64, height: 64, count: 22, regX: 0, regY: 0 },
      animations: {
        idle: 0,
        start: {
          frames: [0, 2],
          next: 'hold',
          speed: .3
        },
        hold: {
          frames: 3,
          next: 'strike',
          speed: .1
        },
        strike: {
          frames: [4, 6],
          next: 'wait',
          speed: .5
        },
        wait: {
          frames: 7,
          next: 'jump',
          speed: .1
        },
        jump: {
          frames: 8,
          next: 'air',
          speed: .6
        },
        air: {
          frames: 9,
          next: 'land',
          speed: .2
        },
        land: {
          frames: [10, 13],
          next: 'sheathe',
          speed: .4
        },
        sheathe: {
          frames: [14, 20],
          next: 'end',
          speed: .3
        },
        end: {
          frames: [21, 22],
          next: 'idle',
          speed: .1
        }
      }
    };
  };

  function Brigand() {
    this.wid = 'brigand';
    this.posRow = 3;
    this.posCol = 4;
    this.src = 'assets/images/animations/enemy/brigand-clean.png';
    this.mv = 4;
    this.images = [];
    this.frames = [[0, 230, 17, 17], [23, 230, 17, 17], [46, 230, 17, 17]];
    this.animations = {
      'idle': {
        frames: [0, 1, 2, 1],
        next: 'idle',
        framerate: 2
      }
    };
    this.battle = {
      wid: 'brigand',
      posX: 150,
      posY: 25,
      images: [],
      frames: [[3, 0, 38, 54], [46, 0, 38, 54], [94, 0, 36, 54], [140, 0, 36, 54], [188, 0, 38, 74], [236, 0, 41, 59], [281, 0, 41, 59], [326, 0, 43, 56], [374, 0, 41, 56], [418, 0, 42, 56], [0, 60, 31, 59], [41, 60, 26, 54]],
      animations: {
        idle: 0,
        attack: [0, 1, 'twist', .4],
        twist: [1, 4, 'jump', .7],
        jump: [5, 5, 'strike', .7],
        strike: [6, 7, 'retreat', .5],
        retreat: [8, 9, 'land', .4],
        land: [10, 11, 'idle', .4]
      }
    };
  };

  // var tanaPath = 'sprites/tana_pegasus_knight_lance_long.png';

  var main = fe.main = {},
      battle = fe.battle = {},
      hero = fe.hero = {},
      moveCache = fe.moveCache = [],
      metrics = fe.metrics = {};

  var ratio = fe.metrics.ratio = 1.5,
      scale = fe.metrics.scale = 2,
      scaleB = fe.metrics.scaleB = 1.5,
      xStartB = fe.metrics.xStartB = 240 * scaleB,
      yStartB = fe.metrics.yStartB = xStartB / ratio,
      xStart = fe.metrics.xStart = 240 * scale,
      yStart = fe.metrics.yStart = xStart / ratio,
      pxPerCol = fe.pxPerCol = xStart / 15,
      pxPerRow = fe.pxPerRow = yStart / 10,
      brigand = new Brigand(),
      lyn = new Lyn();

  document.onload = createStage();

  function createStage() {
    var mainBg = 'assets/images/background/bg-map-1.png';
    var me = document.getElementById('main');
    me.width = xStart;
    me.height = yStart;
    main = new createjs.Stage('main');

    setBackground(mainBg);
    buildSheet(lyn).then(function (ss) {
      createOverworld(ss, 'idle', lyn);
    }, function (error) {
      console.error(error);
    });
    buildSheet(brigand).then(function (ss) {
      createOverworld(ss, 'idle', brigand);
    }, function (error) {
      console.error(error);
    });
    createSelector();
    createBattleStage();
  };

  function createBattleStage() {
    var be = document.getElementById('battle');
    be.width = xStartB;
    be.height = yStartB;
    battle = new createjs.Stage('battle');

    buildImage(lyn.battle.src, lyn.battle, 'start', createSpriteAnimation);
    buildImage(brigand.ss, brigand.battle, 'attack', createSpriteAnimation);
  }

  function setBackground(path) {
    var bitmap = new createjs.Bitmap(path);
    _scale(bitmap);
    main.addChild(bitmap);
    main.setChildIndex(bitmap, -1);
  }

  function buildSheet(data) {
    return new Promise(function (resolve, reject) {
      var img = new Image();
      img.src = data.src;
      img.onload = function () {
        data.images.push(img);
        var ss = new createjs.SpriteSheet(data);
        resolve(ss);
      };
      img.onerror = function (err) {
        reject(Error(err));
      };
    });
  }

  function buildImage(path, data, action, cb) {
    var img = new Image();
    img.src = path;
    img.onload = function () {
      createSpriteSheet(img, data, action, cb);
    };
  }

  function createSpriteSheet(img, data, action, cb) {
    data.images.push(img);
    var ss = new createjs.SpriteSheet(data);
    cb(ss, action, data);
  }

  function createSpriteAnimation(ss, action, data) {
    window[data.wid] = new createjs.Sprite(ss);
    window[data.wid].wid = data.wid;
    window[data.wid].mv = data.mv;
    var sprite = window[data.wid];
    sprite.y = data.posY ? data.posY : 0;
    sprite.x = data.posX ? data.posX : 0;
    _scale(sprite, scaleB);
    battle.addChild(sprite);
    renderDisplay(sprite);

    sprite.gotoAndStop(0);
  }

  function createOverworld(ss, action, data) {
    var owChar = new createjs.Sprite(ss, action);
    _scale(owChar);
    if (data.col !== undefined && data.row !== undefined) {
      owChar.x = colsToPixels(data.col - 1);
      owChar.y = rowsToPixels(data.row - 1);
    }
    owChar.addEventListener('click', function (e) {
      if (moveCache.length === 0) {
        handleStageClick(owChar, e);
      }
    });
    console.log(owChar);
    main.addChild(owChar);
    main.setChildIndex(owChar, 2);
    fe.render(main);
    if (moveCache.length !== 0) {
      drawMoveRects(moveCache);
    }
    if (action !== 0) {
      owChar.gotoAndPlay('idle');
      window.setInterval(function () {
        fe.render(main);
      }, 1000);
    }
  }

  function createSelector() {
    var cw = main.canvas.clientWidth;
    var ch = main.canvas.clientHeight;
    var img = new Image();
    img.src = 'assets/images/overworld/overworld-select.png';
    img.onload = function () {
      var data = {
        row: 8,
        col: 13,
        images: [img],
        frames: { width: 24, height: 24, count: 2, regX: 0, regY: 0 }
      };
      var ss = new createjs.SpriteSheet(data);
      var selector = new createjs.Sprite(ss);
      selector.row = data.row;
      selector.col = data.col;
      document.addEventListener('keydown', function (e) {
        switch (e.keyCode) {
          case 38:
            // Arrow Up
            if (rowsToPixels(selector.row - 1) >= 0) {
              selector.row = selector.row - 1;
            } else {
              selector.row = selector.row;
            }
            selector.y = rowsToPixels(selector.row);
            fe.render(main);
            break;
          case 39:
            // Arrow Right
            if (colsToPixels(selector.col + 1) <= colsToPixels(14)) {
              selector.col = selector.col + 1;
            } else {
              selector.col = selector.col;
            }
            selector.x = colsToPixels(selector.col);
            fe.render(main);
            break;
          case 40:
            // Arrow Down
            if (rowsToPixels(selector.row + 1) <= rowsToPixels(9)) {
              selector.row = selector.row + 1;
            } else {
              selector.row = selector.row;
            }
            selector.y = rowsToPixels(selector.row);
            fe.render(main);
            break;
          case 37:
            // Arrow Left
            if (colsToPixels(selector.col - 1) >= 0) {
              selector.col = selector.col - 1;
            } else {
              selector.col = selector.col;
            }
            selector.x = colsToPixels(selector.col);
            fe.render(main);
            break;
          case 32:
            // Spacebar
            if (lyn.row === selector.row + 1 && lyn.col === selector.col + 1 && moveCache.length === 0) {
              createMoveMap(5, lyn.col - 1, lyn.row - 1, lyn);
            }
            break;
        }
      });
      main.addChild(selector);
      _scale(selector, scaleB);
      fe.render(main);
      selector.gotoAndPlay(0);
      selector.x = colsToPixels(selector.col);
      selector.y = rowsToPixels(selector.row);
    };
  }
})();