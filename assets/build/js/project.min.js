(function() {
  'use strict';

  // Base Global Obj
  var fe = {};

  window.fe = window.fe || fe;
  fe.characterSelected = false;
  fe.heroSelected = undefined;
  fe.arrowStart = [];
  fe.registry = {};
  var mvWorker = new Worker('assets/src/js/workers/move-worker.js');
  // Base Includes
  function _scale(item, s) {
    s = s ? s : scale;
    item.scaleX = s;
    item.scaleY = s;
  }
  
  function rowsToPixels(r) {
    // pixels per row
    var pxPerRow = yStart / 10;
  
    return pxPerRow * r;
  }
  
  function pixelsToRows(p) {
    return Math.floor(p / pxPerRow);
  }
  
  function colsToPixels(c) {
    // pixels per col
    var pxPerCol = xStart / 15;
  
    return pxPerCol * c;
  }
  
  function pixelsToCols(p) {
    return Math.floor(p / pxPerCol);
  }
  
  fe.render = function(stage, child) {
    if(child) {
      if(child.col !== undefined && child.row !== undefined) {
        child.x = colsToPixels(child.col - 1);
        child.y = rowsToPixels(child.row - 1);
      }
      if(child.index !== undefined) {
        stage.setChildIndex(child, 2);
      }
  
      stage.addChild(child);
    }
    stage.update();
    return;
  }
  
  fe.update = function(stage, child) {
    child.x = colsToPixels(child.col);
    child.y = rowsToPixels(child.row);
  
    stage.update();
    return;
  }
  
  fe.renderChild = function(container, child) {
    if(child.col !== undefined && child.row !== undefined) {
      child.x = colsToPixels(child.col - 1);
      child.y = rowsToPixels(child.row - 1);
    }
    if(child.index !== undefined) {
      container.setChildIndex(child, 2);
    }
  
    container.addChild(child);
    return;
  }
  
  // Functions
  
  function handleImageLoad(e) {
    console.log('Image Loaded:');
    console.log(e);
  }
  
  function handleImageError(e) {
    console.error('Image Error');
    console.log(e);
  }
  
  function drawCircle() {
    var circle = new createjs.Shape();
    // drawCircle(x, y, radius)
    circle.graphics.beginFill('DeepSkyBlue').drawCircle(0, 0, 50);
    circle.x = 100;
    circle.y = 100;
    //battle.addChild(circle);
    //renderStage();
  }
  
  function playSprite() {
    lyn.gotoAndPlay('start');
    createjs.Ticker.addEventListener("tick", function() {
      renderDisplay(lyn);
    });
  }
  
  function playSprite2() {
    if(brigand.currentFrame === 0) {
      brigand.gotoAndPlay('attack');
    } else {
      brigand.gotoAndPlay(brigand.currentFrame);
    }
    createjs.Ticker.addEventListener("tick", function() {
      if(brigand.currentFrame == 4) {
        brigand.y = -10;
        brigand.x = 80;
      } else if(brigand.currentFrame == 5) {
        brigand.x = 140;
      } else if(brigand.currentFrame == 6) {
        brigand.x = 190;
      } else if(brigand.currentFrame == 7 || brigand.currentFrame == 8) {
        brigand.x = 190;
        brigand.y = 15;
      } else if(brigand.currentFrame == 9) {
        brigand.x = 150;
        brigand.y = -5;
      } else if(brigand.currentFrame == 10) {
        brigand.x = 120;
        brigand.y = -15;
      } else if(brigand.currentFrame == 11) {
        brigand.x = 90;
        brigand.y = -15;
      } else {
        brigand.x = 70;
        brigand.y = 25;
      }
      renderDisplay(brigand);
    });
  }
  
  function stopSprite(action, obj) {
    sprite = obj ? obj : sprite;
    sprite.gotoAndStop(0);
    battle.update(lyn);
  }
  
  function stopSprite2() {
    brigand.gotoAndStop(brigand.currentFrame);
    renderDisplay(brigand);
  }
  
  function plusFrame(c) {
    var char = window[c];
    char.gotoAndStop(char.currentFrame);
    char.currentFrame = char.currentFrame + 1;
    char.gotoAndStop(char.currentFrame);
    renderDisplay(char);
  }
  
  function minusFrame(c) {
    var char = window[c];
    char.gotoAndStop(char.currentFrame);
    char.currentFrame = char.currentFrame - 1;
    char.gotoAndStop(char.currentFrame);
    renderDisplay(char);
  }
  
  function handleYOffsetChange(e, c) {
    window[c].y = e.value;
    renderDisplay(window[c]);
  }
  
  function handleXOffsetChange(e, c) {
    window[c].x = e.value;
    renderDisplay(window[c]);
  }
  
  function renderDisplay(c) {
    var fd = document.getElementById(c.wid + '-current-frame');
    var xd = document.getElementById(c.wid + '-x-offset');
    var yd = document.getElementById(c.wid + '-y-offset');
    fd.textContent = c.currentFrame;
    modifyLynX(c.currentFrame);
    if(xd.value.length === 0 && yd.value.length === 0) {
      xd.value = c.x;
      yd.value = c.y;
    }
    battle.update();
  }
  
  function modifyLynX(f) {
    switch(f) {
      case 4:
        lyn.x = 200;
        break;
      case 5:
        lyn.x = 170;
        break;
      case 6:
      case 7:
      case 8:
        lyn.x = 200;
        break;
      default:
        lyn.x = 230;
        break;
    }
    return;
  }
  
  function handleStageClick(char, e) {
    var rectCol = pixelsToCols(e.stageX);
    var rectRow = pixelsToRows(e.stageY);
    char.col = rectCol;
    char.row = rectRow;
    hero = char;
  
    createMoveMap(5, rectCol, rectRow, char);
  }
  
  function handleRectClick(rect, e, c) {
    var targetCol = rect.col;
    var targetRow = rect.row;
  
    var colDiff = targetCol - hero.col;
    var rowDiff = targetRow - hero.row;
  
    handleMovement(colDiff, rowDiff, c);
  }
  
  function createMoveMap(c) {
    // Current character coords
    var col = c.col - 1;
    var row = c.row - 1;
    var mv = c.mv;
    var cCalc = col * pxPerCol;
    var rCalc = row * pxPerRow;
    var cw = main.canvas.clientWidth;
    var ch = main.canvas.clientHeight;
    var matrixArr = [];
    var newMatrix = [];
    var atkMatrix = [];
    var arrCache = [];
    var mvTotal = mv + 1;
  
    for(var i=0; i <= mvTotal; i++) {
      for(var idx=0; idx<= mvTotal; idx++) {
        if(idx + i <= mvTotal && idx + i !== 0) {
          matrixArr.push([idx, i]);
        }
      }
    }
  
    matrixArr.forEach(function(item) {
      var newItem = [];
      var cacheString = '';
      newItem[0] = (col + item[0]) * pxPerCol;
      newItem[1] = (row + item[1]) * pxPerRow;
      cacheString = newItem[0] + ', ' + newItem[1];
      if(arrCache.indexOf(cacheString) === -1 && newItem[0] <= cw && newItem[0] >= 0 && newItem[1] <= ch) {
        arrCache.push(cacheString);
        if(item[0] + item[1] < mvTotal) {
          newMatrix.push(newItem);
        } else {
          atkMatrix.push(newItem);
        }
      }
      newItem = [];
      newItem[0] = (col - item[0]) * pxPerCol;
      newItem[1] = (row - item[1]) * pxPerRow;
      cacheString = newItem[0] + ', ' + newItem[1];
      if(arrCache.indexOf(cacheString) === -1 && newItem[0] <= cw && newItem[0] >= 0 && newItem[1] <= ch) {
        arrCache.push(cacheString);
        if(item[0] + item[1] < mvTotal) {
          newMatrix.push(newItem);
        } else {
          atkMatrix.push(newItem);
        }
      }
      newItem = [];
      newItem[0] = (col + item[0]) * pxPerCol;
      newItem[1] = (row - item[1]) * pxPerRow;
      cacheString = newItem[0] + ', ' + newItem[1];
      if(arrCache.indexOf(cacheString) === -1 && newItem[0] <= cw && newItem[0] >= 0 && newItem[1] <= ch) {
        arrCache.push(cacheString);
        if(item[0] + item[1] < mvTotal) {
          newMatrix.push(newItem);
        } else {
          atkMatrix.push(newItem);
        }
      }
      newItem = [];
      newItem[0] = (col - item[0]) * pxPerCol;
      newItem[1] = (row + item[1]) * pxPerRow;
      cacheString = newItem[0] + ', ' + newItem[1];
      if(arrCache.indexOf(cacheString) === -1 && newItem[0] <= cw && newItem[0] >= 0 && newItem[1] <= ch) {
        arrCache.push(cacheString);
        if(item[0] + item[1] < mvTotal) {
          newMatrix.push(newItem);
        } else {
          atkMatrix.push(newItem);
        }
      }
      return;
    })
    //console.log(newMatrix);
    //console.log(atkMatrix);
    moveCache = newMatrix;
  
    drawMoveRects(newMatrix, c);
    drawAtkRects(atkMatrix, c);
    fe.characterSelected = true;
  }
  
  function drawMoveRects(arr, c) {
    fe.moveContainer = new createjs.Container();
    arr.forEach(function(coord) {
      var rect = new createjs.Shape();
      rect.col = coord[0] / pxPerCol;
      rect.row = coord[1] / pxPerRow;
      rect.graphics.beginFill('rgba(92, 165, 225, .6)').drawRect(coord[0], coord[1], pxPerCol - 1, pxPerRow - 1);
      rect.addEventListener('click', function(e) {
        handleRectClick(rect, e, c);
      });
      fe.moveContainer.addChild(rect);
    });
    main.addChild(fe.moveContainer);
    main.setChildIndex(fe.moveContainer, 1);
    main.update();
  }
  
  function drawAtkRects(arr, c) {
    fe.moveContainer = fe.moveContainer ? fe.moveContainer : new createjs.Container();
    arr.forEach(function(coord) {
      var rect = new createjs.Shape();
      rect.col = coord[0] / pxPerCol;
      rect.row = coord[1] / pxPerRow;
      rect.graphics.beginFill('rgba(244, 67, 55, .6)').drawRect(coord[0], coord[1], pxPerCol - 1, pxPerRow - 1);
      rect.addEventListener('click', function(e) {
        handleRectClick(rect, e, c);
      });
      fe.moveContainer.addChild(rect);
    });
    main.addChild(fe.moveContainer);
    main.setChildIndex(fe.moveContainer, 1);
    main.update();
  }
  
  function removeMoveMap() {
    main.removeChild(fe.moveContainer);
    fe.characterSelected = false;
    fe.hoverSelect = fe.heroSelected;
    fe.heroSelected = undefined;
    hero = {};
    moveCache = [];
    fe.render(main);
    return;
  }
  
  function calculateMoveSelect() {
    var hero = fe.heroSelected;
    var colMem = hero.col;
    var rowMem = hero.row;
    hero.col = selector.col;
    hero.row = selector.row;
    hero.getMoveMatrix(hero.col, hero.row);
    fe.render(main, hero);
    fe.registry[colMem + ', ' + rowMem] = undefined;
    register(hero);
    removeMoveMap();
  }
  
  function handleMovement(x, y, c) {
    if(x !== 0) {
      moveX(x, c);
    }
    if(y !== 0) {
      moveY(y, c);
    }
  }
  
  function moveX(x, c) {
    if(x > 0) {
      // move right
      for(var i=1; i<=x; i++) {
        c.col += i;
        fe.update(main, c);
      }
    } else {
      // move left
      for(var i = 1; i <= Math.abs(x); i++) {
        c.col -= i;
        fe.update(main, c);
      }
    }
    return;
  }
  
  function moveY(y, c) {
    if(y > 0) {
      // move down
      for(var i=1; i<=y; i++) {
        c.row += i;
        fe.update(main, c);
      }
    } else {
      // move up
      for(var i = 1; i <= Math.abs(y); i++) {
        c.row -= i;
        fe.update(main, c);
      }
    }
    return;
  }
  
  function createSelector() {
    var cw = main.canvas.clientWidth;
    var ch = main.canvas.clientHeight;
    var img = new Image();
    img.src = 'assets/images/overworld/overworld-select.png';
    img.onload = function() {
      var data = {
        row: 9,
        col: 14,
        images: [img],
        frames: {width: 24, height: 24, count: 2, regX: 0, regY: 0}
      }
      var ss = new createjs.SpriteSheet(data);
      selector = new createjs.Sprite(ss);
      selector.row = data.row;
      selector.col = data.col;
      _scale(selector, scaleB);
      fe.render(main, selector);
      selector.gotoAndPlay(0);
      fe.arrowStart = [selector.x, selector.y];
      bindSelector();
    };
  }
  
  function bindSelector() {
    document.addEventListener('keydown', function(e) {
      switch(e.keyCode) {
        case 38:
          // Arrow Up
          if(selector.row - 1 >= 0) {
            selector.row -= 1;
          } else {
            selector.row = selector.row;
          }
          var arrowY = selector.row;
          var arrowX = selector.col;
          fe.render(main, selector);
          //renderArrow(arrowX, arrowY, 0);
          break;
        case 39:
          // Arrow Right
          if(selector.col + 1 <= totalCols) {
            selector.col += 1;
          } else {
            selector.col = selector.col;
          }
          var arrowY = selector.row;
          var arrowX = selector.col;
          fe.render(main, selector);
          //renderArrow(arrowX, arrowY, 90);
          break;
        case 40:
          // Arrow Down
          if(selector.row + 1 <= totalRows) {
            selector.row += 1;
          } else {
            selector.row = selector.row;
          }
          var arrowY = selector.row;
          var arrowX = selector.col;
          fe.render(main, selector);
          //renderArrow(arrowX, arrowY, 180);
          break;
        case 37:
          // Arrow Left
          selector.row = selector.row;
          if(selector.col - 1 >= 0) {
            selector.col -= 1;
          } else {
            selector.col = selector.col;
          }
          var arrowY = selector.row;
          var arrowX = selector.col;
          fe.render(main, selector);
          //renderArrow(arrowX, arrowY, 270);
          break;
        case 32:
          // Spacebar
          if(fe.registry[selector.col + ', ' + selector.row] !== undefined && !fe.characterSelected) {
            fe.heroSelected = fe.registry[selector.col + ', ' + selector.row];
            console.log("Hero Selected: ");
            console.log(fe.heroSelected);
            drawMoveRects(fe.heroSelected.moveMap[0], fe.heroSelected);
            drawAtkRects(fe.heroSelected.moveMap[1], fe.heroSelected);
            fe.characterSelected = true;
          } else if(fe.characterSelected && fe.hoverSelect === fe.heroSelected) {
            removeMoveMap();
          } else if(fe.characterSelected && fe.heroSelected !== undefined) {
            console.log("Space Bar Pressed");
            calculateMoveSelect();
          }
          break;
      }
      if(fe.registry[selector.col + ', ' + selector.row] !== undefined) {
        fe.hoverSelect = fe.registry[selector.col + ', ' + selector.row];
        console.log("Select Hover Event:");
        console.log(fe.hoverSelect);
        if(fe.hoverSelect.hud) {
          displayHud(fe.hoverSelect);
        }
      } else {
        fe.hoverSelect = undefined;
      }
      _scale(selector, scaleB);
      fe.render(main, selector);
      selector.gotoAndPlay(0);
    })
  }
  
  function displayHud(c) {
    var hud = new createjs.Container();
    var name = new createjs.Text(c.hud.nameDisplay, '400 20px Quicksand, sans-serif', 'rgba(40, 44, 52, 1.00)');
    var g = new createjs.Graphics().setStrokeStyle(2).beginStroke('rgba(225, 239, 238, 1.00)').beginFill('rgba(171, 193, 223, .9)').drawRoundRect(0, 0, 100, 34, 5, 5, 5, 5);
    var hudBg = new createjs.Shape(g);
    _scale(hudBg);
    var hudImg = Mugshot(c.hud.mugshot);
    console.log(hudImg);
    hudImg.x = 4;
    hudImg.y = 2;
    hud.x = pxPerCol / 2;
    hud.y = pxPerRow / 2;
    name.x = pxPerCol * 2.5;
    name.y = 10;
    hud.addChild(hudBg);
    hud.addChild(hudImg);
    hud.addChild(name);
    fe.render(main, hud);
  }
  


  // Hero Includes
  // Needed Variables
  var brigand = new Brigand(),
      lyn = new Lyn();
  
  function createBattleCharacters() {
  
    createBattleStage();
  }
  
  function createBattleStage() {
    var be = document.getElementById('battle');
    be.width = xStartB;
    be.height = yStartB;
    battle = new createjs.Stage('battle');
  
    buildImage(lyn.battle.src, lyn.battle, 'start', createSpriteAnimation);
    buildImage(brigand.ss, brigand.battle, 'attack', createSpriteAnimation);
  }
  
  function createSpriteAnimation(ss, action, data) {
    window[data.wid] = new createjs.Sprite(ss);
    window[data.wid].wid = data.wid;
    window[data.wid].mv = data.mv;
    var sprite = window[data.wid];
    sprite.y = data.posY ? data.posY : 0;
    sprite.x = data.posX ? data.posX : 0;
    _scale(sprite, scaleB);
    battle.addChild(sprite);
    renderDisplay(sprite);
  
    sprite.gotoAndStop(0);
  }
  
  'use strict';
  
  function Lyn(col, row) {
    this.row = row || 9;
    this.col = col || 14;
    this.mv = 5;
    this.builder = function(col, row) {
      return new Lyn(col, row);
    },
    this.src = 'assets/images/overworld/overworld-characters-clean.png';
    // image to use
    this.images = [];
    // width, height, count(optional), registration x, registration y
    this.frames = [
      // x, y, width, height, imageIndex, regX, regY
      [189, 171, 16, 16],
      [189, 203, 16, 16],
      [189, 235, 16, 16]
    ];
    this.animations = {
      'idle': {
        frames: [0, 2, 1, 0],
        next: 'idle',
        framerate: 2
      }
    };
    this.hud = {
      nameDisplay: "Lyn",
      mugshot: [352, 348, 32, 32]
    },
    this.battle = {
      wid: 'lyn',
      posY: 40,
      posX: 230,
      row: 9,
      col: 15,
      mv: 3,
      src: 'assets/images/animations/hero/lyn-loop.png',
      // image to use
      images: [],
      // width, height, count(optional), registration x, registration y
      frames: {width:64, height:64, count:22, regX:0, regY:0},
      animations: {
        idle: 0,
        start: {
          frames: [0, 2],
          next: 'hold',
          speed: .3
        },
        hold: {
          frames: 3,
          next: 'strike',
          speed: .1
        },
        strike: {
          frames: [4, 6],
          next: 'wait',
          speed: .5
        },
        wait: {
          frames: 7,
          next: 'jump',
          speed: .1
        },
        jump: {
          frames: 8,
          next: 'air',
          speed: .6
        },
        air: {
          frames: 9,
          next: 'land',
          speed: .2
        },
        land: {
          frames: [10, 13],
          next: 'sheathe',
          speed: .4
        },
        sheathe: {
          frames: [14, 20],
          next: 'end',
          speed: .3
        },
        end: {
          frames: [21, 22],
          next: 'idle',
          speed: .1
        }
      }
    }
  };
  
  function Brigand(col, row) {
    this.wid = 'brigand';
    this.row = row || 3;
    this.col = col || 4;
    this.builder = function(col, row) {
      return new Brigand(col, row);
    }
    this.src = 'assets/images/animations/enemy/brigand-clean.png';
    this.mv = 4;
    this.images = [];
    this.frames = [
      [0, 230, 17, 17],
      [23, 230, 17, 17],
      [46, 230, 17, 17]
    ];
    this.animations = {
      'idle': {
        frames: [0, 1, 2, 1],
        next: 'idle',
        framerate: 2
      }
    };
    this.battle = {
      wid: 'brigand',
      posX: 150,
      posY: 25,
      images: [],
      frames: [
        [3, 0, 38, 54],
        [46, 0, 38, 54],
        [94, 0, 36, 54],
        [140, 0, 36, 54],
        [188, 0, 38, 74],
        [236, 0, 41, 59],
        [281, 0, 41, 59],
        [326, 0, 43, 56],
        [374, 0, 41, 56],
        [418, 0, 42, 56],
        [0, 60, 31, 59],
        [41, 60, 26, 54]
      ],
      animations: {
        idle: 0,
        attack: [0, 1, 'twist', .4],
        twist: [1, 4, 'jump', .7],
        jump: [5, 5, 'strike', .7],
        strike: [6, 7, 'retreat', .5],
        retreat: [8, 9, 'land', .4],
        land: [10, 11, 'idle', .4]
      }
    }
  };
  
  

  var main = fe.main = {},
      battle = fe.battle = {},
      hero = fe.hero = {},
      moveCache = fe.moveCache = [],
      metrics = fe.metrics = {},
      selector = fe.selector = {},
      arrowHead = fe.arrowHead = {},
      Mugshot = undefined;

  var totalRows = fe.totalRows = 10,
      totalCols = fe.totalCols = 15,
      canvasWidth = fe.canvasWidth = 240,
      ratio = fe.metrics.ratio = 1.5,
      scale = fe.metrics.scale = 2,
      scaleB = fe.metrics.scaleB = 1.5;

  var xStartB = fe.metrics.xStartB = canvasWidth * scaleB,
      yStartB = fe.metrics.yStartB = xStartB / ratio,
      xStart = fe.metrics.xStart = canvasWidth * scale,
      yStart = fe.metrics.yStart = xStart / ratio,
      pxPerCol = fe.pxPerCol = xStart / totalCols,
      pxPerRow = fe.pxPerRow = yStart / totalRows;

  var mainBg = 'assets/images/background/bg-map-1.png';


  document.onload = createStage();

  function createStage() {
    var me = document.getElementById('main');
    me.width = xStart;
    me.height = yStart;
    main = new createjs.Stage('main');

    setBackground(mainBg);
    createOverworldCharacters();
    createOverworldSheets();
    createSelector();
    owDebug();
  };

  function owDebug(x, y, col, row) {
    var paramList = [x, y, col, row];
    var idList = ['selector-x', 'selector-y', 'selector-col', 'selector-row'];
    for(var i=0;i<idList.length;i++) {
      var el = document.getElementById(idList[i]);
      el.textContent = paramList[i];
    }
  }

  function createOverworldCharacters() {
    buildSheet(lyn).then(function(ss) {
      createOverworld(ss, 'idle', lyn);
    }, function(error) {
      console.error(error);
    })
    buildSheet(brigand).then(function(ss) {
      createOverworld(ss, 'idle', brigand);
    }, function(error) {
      console.error(error);
    })
  }

  function createOverworldSheets() {
    var mugImg = new Image();
    mugImg.src = 'assets/images/mugshots/mugshot-conversation-map-clean.png';
    mugImg.onload = function() {
      Mugshot = function(frames) {
        var mugSS = new createjs.SpriteSheet({
          images: new Array(mugImg),
          frames: [
            frames
          ]
        });
        var mugSprite = new createjs.Sprite(mugSS);
        _scale(mugSprite);
        return mugSprite;
      };
      console.log("Mugshot Constructor Ready");
      return;
    }
  }

  function register(c) {
    var gr = fe.registry;

    gr[c.col + ', ' + c.row] = c;
  }

  function setBackground(path) {
    var bitmap = new createjs.Bitmap(path);
    _scale(bitmap);
    main.addChild(bitmap);
    main.setChildIndex(bitmap, -1);
  }

  function buildSheet(character) {
    return new Promise(function(resolve, reject) {
      var img = new Image();
      img.src = character.src;
      img.onload = function() {
        character.images.push(img);
        var ss = new createjs.SpriteSheet(character);
        resolve(ss);
      };
      img.onerror = function(err) {
        reject(Error(err));
      }
    })
  }

  function buildImage(path, character, action, cb) {
    var img = new Image();
    img.src = path;
    img.onload = function() {
      createSpriteSheet(img, character, action, cb);
    };
  }

  function createSpriteSheet(img, character, action, cb) {
    character.images.push(img);
    var ss = new createjs.SpriteSheet(character);
    cb(ss, action, character);
  }

  function createOverworld(ss, action, character) {
    character.sheet = ss;
    character.sprite = new createjs.Sprite(ss, action);
    character.sprite.getMoveMatrix = function(col, row) {
      mvWorker.postMessage({
        'canvasHeight': main.canvas.clientHeight,
        'canvasWidth': main.canvas.clientWidth,
        'totalCols': totalCols,
        'totalRows': totalRows,
        'mv': character.sprite.mv,
        'col': col,
        'row': row,
        'atk': 1
      });

      mvWorker.onmessage = function(e) {
        character.sprite.moveMap = [e.data[0], e.data[1]];
      }
    }
    character.sprite.cid = character.wid;
    character.sprite.mv = character.mv;
    character.sprite.builder = character.builder;
    character.sprite.col = character.col;
    character.sprite.row = character.row;
    character.sprite.hud = character.hud;
    character.sprite.index = 2;
    _scale(character.sprite);
    register(character.sprite);
    character.sprite.getMoveMatrix(character.sprite.col, character.sprite.row);
    fe.render(main, character.sprite);

    character.sprite.addEventListener('click', function(e) {
      if(moveCache.length === 0) {
        handleStageClick(character, e);
      }
    });

    character.sprite.getMoveMatrix(character.sprite.col, character.sprite.row);
    if(moveCache.length !== 0) {
      drawMoveRects(moveCache);
    }
    if(action !== 0) {
      character.sprite.gotoAndPlay('idle');
      fe.int = window.setInterval(function() {
        fe.render(main);
      }, 1000);
    }
  } // end createOverworld

  function renderArrow(x, y, rot) {
    var img = new Image();
    img.src = 'assets/images/overworld/arrow-head.png';
    img.onload = function() {
      var data = {
        images: [img],
        frames: {width: 16, height: 16, count: 1, regX: 0, regY: 0}
      }
      var ss = new createjs.SpriteSheet(data);
      var arrow = new createjs.Sprite(ss);
      _scale(arrow);
      if(!arrowHead.length) {
        arrowHead = arrow;
      }
      if(arrowHead.col === undefined) {
        arrowHead.col = selector.col;
      } else {
        arrow.col = arrowHead.col + x;
      }

      if(arrowHead.row === undefined) {
        arrowHead.row = selector.row;
      } else {
        arrow.row = arrowHead.row + y;
      }
      console.log(arrow);
      arrow.col = selector.col;
      arrow.row = selector.row;
      arrow.index = 3;
      arrow.rotation = rot;
      fe.renderChild(main, arrow);
      fe.render(main);
      arrow.gotoAndPlay(0);
    }
  }
})();
